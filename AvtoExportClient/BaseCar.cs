using System;

namespace AvtoExportClient
{
    // Количество облегченных детелаей. Просто счетчик
    [Serializable]
    public class BaseCar
    {
        public BaseCar()
        {
            uniqCarNumber = Counters.carNumber;
            Counters.carNumber++;
        }

        public enum _МатериалыМеталл
        {
            Заводская,
            УсиленнаяСталь,
            Титан,
            Алюминий
        }

        public enum _МатериалыОбщие
        {
            Заводская = 0,
            УсиленнаяСталь,
            Титан,
            Алюминий,
            Углепластик,
            Стекловолокно
        }

        public enum _ТипАмортизаторов
        {
            Масло = 0,
            ГазМасло,
            Газ
        }

        public enum _Привод
        {
            Задний = 0,
            Передний,
            Полный
        };

        public enum _ИспользуемыйРяд
        {
            Стандарт = 0,
            R1,
            R2, R3, R4, R5, R505
        }

        // В качестве ID используется цена
        public enum _МодельИспользуемогоРаспредвала
        {
            Иной = -1,
            Стандарт = 0,
            VFTS_1 = 100,
            VFTS_2 = 200,
            VFTS_3 = 300,
            VFTS_T16 = 150,
            MTX_1 = 350,
            MTX_2 = 300,
        }

        public enum _ЗаводСборщик
        {
            Тольятти,
            ИЖ
        }

        public enum модельИМаркаИспользуемогоОбвеса
        {
            Заводской = 0,
            VFTS,
            MTX,
            _4x4,
            Shakotan, // JDM
            Другой
        }

        public enum _Ателье
        {
            АвтоВАЗ = 0,
            ВФТС,
            Вихур,
            Metalex,
            ЛГСА
        }

        public enum стабилизаторПоперечнойУчтойчивостиИМатериал
        {
            НЕИспользуется = 0,
            Заводской_Одинарный_ОбычнаяСталь,
            Двойной_Титан,
            Двойной_УсиленнаяСталь
        }

        public enum cистемаЗажигания
        { Контактная = 0, Бесконтактная }

        public enum _СпортивнаяДисциплина
        {
            ГражданскаяЕзда,
            Ралли,
            Кольцо,
            ПодъемНаХолм,
            Дрифт,
            Выносливость,
            АвтоКросс,
            Автослалом,
            Дрэгрейсинг,
            Выживание
        }

        public enum _Двигатель
        {
            Заводской_1_2 = 0,
            Заводской_1_3,
            Заводской_1_45,//1.5
            Заводской_1_5,
            Заводской_1_6,
            Заводской_1_7,
            Заводской_1_8,
            Заводской_Дизель341,
            Заводской_РПД4132,
            ВФТС_8кл_120_1_6,
            ВФТС_8кл_130_1_6,
            ВФТС_8кл_140_1_6,
            ВФТС_8кл_150_1_6,
            ВФТС_8кл_160_1_6,
            ВФТС_8кл_170_1_6,
            ВФТС_8кл_180_1_6,
            ВФТС_16кл_160_1_6,
            ВФТС_16кл_170_1_6,
            ВФТС_16кл_180_1_6,
            ВФТС_16кл_300_Т16_1_6,

            ЛГСА_16кл_160_1_6,
            ЛГСА_16кл_180_1_6,

            МТХ_16кл_163_1_8,
            МТХ_16кл_230_2_0,
        }//Двигатель

        _СпортивнаяДисциплина _cпортивнаяДисциплина = _СпортивнаяДисциплина.ГражданскаяЕзда;


        // Название модели
        public string Название_Модели
        {
            get
            {
                return name;
            }

            set
            {
                name = value;
            }
        }

        public _ЗаводСборщик Производитель
        {
            get
            {
                return manufacturer;
            }

            set
            {
                if (Производитель == _ЗаводСборщик.ИЖ && value == _ЗаводСборщик.Тольятти)
                {
                    Цена += 100;
                }
                else if (Производитель == _ЗаводСборщик.Тольятти && value == _ЗаводСборщик.ИЖ)
                    Цена -= 100;

                manufacturer = value;
            }
        }

        public _Ателье Подрядчик
        {
            get
            {
                return _Подрядчик;
            }

            set
            {
                if (Подрядчик == _Ателье.АвтоВАЗ && value == _Ателье.ВФТС)
                {
                    Цена += 400;
                }
                else if (Подрядчик == _Ателье.АвтоВАЗ && value == _Ателье.Вихур)
                    Цена += 100;
                else if (Подрядчик == _Ателье.АвтоВАЗ && value == _Ателье.Metalex)
                    Цена += 700;
                else if (Подрядчик == _Ателье.АвтоВАЗ && value == _Ателье.ЛГСА)
                    Цена += 200;

                else if (Подрядчик == _Ателье.ВФТС && value == _Ателье.АвтоВАЗ)
                    Цена -= 400;
                else if (Подрядчик == _Ателье.ВФТС && value == _Ателье.Вихур)
                    Цена -= 300;
                else if (Подрядчик == _Ателье.ВФТС && value == _Ателье.Metalex)
                    Цена += 0;
                else if (Подрядчик == _Ателье.ВФТС && value == _Ателье.ЛГСА)
                    Цена += 200;

                else if (Подрядчик == _Ателье.Вихур && value == _Ателье.АвтоВАЗ)
                    Цена -= 100;
                else if (Подрядчик == _Ателье.Вихур && value == _Ателье.ВФТС)
                    Цена += 300;
                else if (Подрядчик == _Ателье.Вихур && value == _Ателье.Metalex)
                    Цена += 600;
                else if (Подрядчик == _Ателье.Вихур && value == _Ателье.ЛГСА)
                    Цена += 100;

                else if (Подрядчик == _Ателье.Metalex && value == _Ателье.АвтоВАЗ)
                    Цена -= 700;
                else if (Подрядчик == _Ателье.Metalex && value == _Ателье.Вихур)
                    Цена -= 600;
                else if (Подрядчик == _Ателье.Metalex && value == _Ателье.ВФТС)
                    Цена -= 300;
                else if (Подрядчик == _Ателье.Metalex && value == _Ателье.ЛГСА)
                    Цена -= 400;

                else if (Подрядчик == _Ателье.ЛГСА && value == _Ателье.АвтоВАЗ)
                    Цена -= 200;
                else if (Подрядчик == _Ателье.ЛГСА && value == _Ателье.ВФТС)
                    Цена += 100;
                else if (Подрядчик == _Ателье.ЛГСА && value == _Ателье.Metalex)
                    Цена += 400;
                else if (Подрядчик == _Ателье.ЛГСА && value == _Ателье.Вихур)
                    Цена -= 100;


                _Подрядчик = value;
            }
        }

        public float Вес
        {
            get
            {
                return weight;
            }

            set
            {
                weight = value;
            }
        }

        public float Длина
        {
            get
            {
                return length;
            }

            set
            {
                length = value;
            }
        }

        public bool КаркасБезопасности
        {
            get
            {
                return withSafetyCarcass;
            }

            set
            {
                if (КаркасБезопасности == true && value == false)
                {
                    Цена -= 400;
                }
                else if (КаркасБезопасности == false && value == true)
                    Цена += 400;

                withSafetyCarcass = value;
            }
        }

        public bool ИспользованиеКомпозитныхМатериалов
        {
            get
            {
                return withCompositeMaterials;
            }

            set
            {
                if (ИспользованиеКомпозитныхМатериалов == true && value == false)
                {
                    Цена -= 600;
                }
                else if (ИспользованиеКомпозитныхМатериалов == false && value == true)
                    Цена += 600;

                withCompositeMaterials = value;
            }
        }

        public стабилизаторПоперечнойУчтойчивостиИМатериал ИспользуетсяЗаднийСтабилизатор
        {
            get
            {
                return используетсяЗаднийСтабилизатор;
            }

            set
            {
                // Не используется
                if (ИспользуетсяЗаднийСтабилизатор == стабилизаторПоперечнойУчтойчивостиИМатериал.НЕИспользуется
                    && value == стабилизаторПоперечнойУчтойчивостиИМатериал.Заводской_Одинарный_ОбычнаяСталь)
                {
                    Цена += 75;
                }
                else
                if (ИспользуетсяЗаднийСтабилизатор == стабилизаторПоперечнойУчтойчивостиИМатериал.НЕИспользуется
                    && value == стабилизаторПоперечнойУчтойчивостиИМатериал.Двойной_Титан)
                {
                    Цена += 350;
                }
                else
                if (ИспользуетсяЗаднийСтабилизатор == стабилизаторПоперечнойУчтойчивостиИМатериал.НЕИспользуется
                    && value == стабилизаторПоперечнойУчтойчивостиИМатериал.Двойной_УсиленнаяСталь)
                {
                    Цена += 150;
                }

                // Заводской одинарный
                else
                if (ИспользуетсяЗаднийСтабилизатор == стабилизаторПоперечнойУчтойчивостиИМатериал.Заводской_Одинарный_ОбычнаяСталь
                    && value == стабилизаторПоперечнойУчтойчивостиИМатериал.Двойной_УсиленнаяСталь)
                {
                    Цена += 75;
                }
                else
                if (ИспользуетсяЗаднийСтабилизатор == стабилизаторПоперечнойУчтойчивостиИМатериал.Заводской_Одинарный_ОбычнаяСталь
                    && value == стабилизаторПоперечнойУчтойчивостиИМатериал.Двойной_Титан)
                {
                    Цена += 275;
                }
                else
                if (ИспользуетсяЗаднийСтабилизатор == стабилизаторПоперечнойУчтойчивостиИМатериал.Заводской_Одинарный_ОбычнаяСталь
                    && value == стабилизаторПоперечнойУчтойчивостиИМатериал.НЕИспользуется)
                {
                    Цена -= 75;
                }

                // Двойной_Титан
                else
                if (ИспользуетсяЗаднийСтабилизатор == стабилизаторПоперечнойУчтойчивостиИМатериал.Двойной_Титан
                    && value == стабилизаторПоперечнойУчтойчивостиИМатериал.НЕИспользуется)
                {
                    Цена -= 350;
                }
                else
                if (ИспользуетсяЗаднийСтабилизатор == стабилизаторПоперечнойУчтойчивостиИМатериал.Двойной_Титан
                    && value == стабилизаторПоперечнойУчтойчивостиИМатериал.Заводской_Одинарный_ОбычнаяСталь)
                {
                    Цена -= 275;
                }
                else
                if (ИспользуетсяЗаднийСтабилизатор == стабилизаторПоперечнойУчтойчивостиИМатериал.Двойной_Титан
                    && value == стабилизаторПоперечнойУчтойчивостиИМатериал.Двойной_УсиленнаяСталь)
                {
                    Цена -= 200;
                }

                // Двойной_УсиленнаяСталь
                else if (ИспользуетсяЗаднийСтабилизатор == стабилизаторПоперечнойУчтойчивостиИМатериал.Двойной_УсиленнаяСталь
                    && value == стабилизаторПоперечнойУчтойчивостиИМатериал.НЕИспользуется)
                {
                    Цена -= 150;
                }
                else if (ИспользуетсяЗаднийСтабилизатор == стабилизаторПоперечнойУчтойчивостиИМатериал.Двойной_УсиленнаяСталь
                   && value == стабилизаторПоперечнойУчтойчивостиИМатериал.Двойной_Титан)
                {
                    Цена += 200;
                }
                else if (ИспользуетсяЗаднийСтабилизатор == стабилизаторПоперечнойУчтойчивостиИМатериал.Двойной_УсиленнаяСталь
                   && value == стабилизаторПоперечнойУчтойчивостиИМатериал.Заводской_Одинарный_ОбычнаяСталь)
                {
                    Цена -= 75;
                }

                используетсяЗаднийСтабилизатор = value;
            }
        }

        public _ТипАмортизаторов ТипАмортизаторов
        {
            get
            {
                return типАмортизаторов;
            }

            set
            {
                //if (ИспользованиеКомпозитныхМатериалов == true && value == false)
                //{
                //    Цена -= 600;
                //}
                //else if (ИспользованиеКомпозитныхМатериалов == false && value == true)
                //    Цена += 600;

                типАмортизаторов = value;
            }
        }

        public string МаркаАмортизаторов
        {
            get
            {
                return маркаАмортизаторов;
            }

            set
            {
                маркаАмортизаторов = value;
            }
        }

        public стабилизаторПоперечнойУчтойчивостиИМатериал СтабилизаторПоперечнойУчтойчивостиИМатериал
        {
            get
            {
                return _стабилизаторПоперечнойУчтойчивостиИМатериал;
            }

            set
            {
                //if (ИспользованиеКомпозитныхМатериалов == true && value == false)
                //{
                //    Цена -= 600;
                //}
                //else if (ИспользованиеКомпозитныхМатериалов == false && value == true)
                //    Цена += 600;

                _стабилизаторПоперечнойУчтойчивостиИМатериал = value;
            }
        }

        public bool НаличиеГидроручника
        {
            get
            {
                return наличиеГидроручника;
            }

            set
            {
                if (НаличиеГидроручника == true && value == false)
                {
                    Цена -= 100;
                }
                else if (НаличиеГидроручника == false && value == true)
                    Цена += 100;

                наличиеГидроручника = value;
            }
        }

        public bool ЗадниеДисковоыеТормоза
        {
            get
            {
                return задниеДисковоыеТормоза;
            }

            set
            {
                if (НаличиеГидроручника == true && value == false)
                {
                    Цена -= 100;
                }
                else if (НаличиеГидроручника == false && value == true)
                    Цена += 100;


                задниеДисковоыеТормоза = value;
            }
        }

        public _Двигатель Двигатель
        {
            get
            {
                return _двигатель;
            }

            set
            {
                //if (НаличиеГидроручника == true && value == false)
                //{
                //    Цена -= 100;
                //}
                //else if (НаличиеГидроручника == false && value == true)
                //    Цена += 100;


                _двигатель = value;
            }
        }

        public _МодельИспользуемогоРаспредвала МодельИспользуемогоРаспредвала
        {
            get
            {
                return модельИспользуемогоРаспредвала;
            }

            set
            {
                //if (НаличиеГидроручника == true && value == false)
                //{
                //    Цена -= 100;
                //}
                //else if (НаличиеГидроручника == false && value == true)
                //    Цена += 100;


                модельИспользуемогоРаспредвала = value;
            }
        }

        public string МаркаКарбюраторов
        {
            get
            {
                return маркаКарбюраторов;
            }

            set
            {
                маркаКарбюраторов = value;
            }
        }

        public bool ИспользуетсяСистемаВпрыска
        {
            get
            {
                return используетсяСистемаВпрыска;
            }

            set
            {
                if (ИспользуетсяСистемаВпрыска == true && value == false)
                {
                    Цена -= 100;
                }
                else if (ИспользуетсяСистемаВпрыска == false && value == true)
                    Цена += 100;

                используетсяСистемаВпрыска = value;
            }
        }

        public string СистемаВпрыска
        {
            get
            {
                return системаВпрыска;
            }

            set
            {
                системаВпрыска = value;
            }
        }

        public cистемаЗажигания СистемаЗажигания
        {
            get
            {
                return _cистемаЗажигания;
            }

            set
            {
                if (СистемаЗажигания == cистемаЗажигания.Бесконтактная && value == cистемаЗажигания.Контактная)
                {
                    Цена -= 100;
                }
                else if (СистемаЗажигания == cистемаЗажигания.Контактная && value == cистемаЗажигания.Бесконтактная)
                    Цена += 100;

                _cистемаЗажигания = value;
            }
        }

        public float СтепеньСжатия
        {
            get
            {
                return степеньСжатия;
            }

            set
            {
                степеньСжатия = value;
            }
        }

        public Tuple<float, _МатериалыМеталл> МассаМаховикаИМатериал
        {
            get
            {
                return массаМаховикаИМатериал;
            }

            set
            {
                массаМаховикаИМатериал = value;
            }
        }

        public bool ПрямозубаяКоробкаПередач
        {
            get
            {
                return прямозубаяКоробкаПередач;
            }

            set
            {
                if (ПрямозубаяКоробкаПередач == true && value == false)
                {
                    Цена -= 100;
                }
                else if (ПрямозубаяКоробкаПередач == false && value == true)
                    Цена += 100;

                прямозубаяКоробкаПередач = value;
            }
        }

        public int КоличествоСтупеней
        {
            get
            {
                return количествоСтупеней;
            }

            set
            {
                количествоСтупеней = value;
            }
        }

        public _ИспользуемыйРяд ИспользуемыйРяд
        {
            get
            {
                return используемыйРяд;
            }

            set
            {
                //if (ПрямозубаяКоробкаПередач == true && value == false)
                //{
                //    Цена -= 100;
                //}
                //else if (ПрямозубаяКоробкаПередач == false && value == true)
                //    Цена += 100;

                используемыйРяд = value;
            }
        }

        public Tuple<float, int> ГлавнаяПара
        {
            get
            {
                return главнаяПара;
            }

            set
            {
                главнаяПара = value;
            }
        }

        public bool ДополнительныйСвет
        {
            get
            {
                return дополнительныйСвет;
            }

            set
            {
                if (ДополнительныйСвет == true && value == false)
                {
                    Цена -= 100;
                }
                else if (ДополнительныйСвет == false && value == true)
                    Цена += 100;

                дополнительныйСвет = value;
            }
        }

        public модельИМаркаИспользуемогоОбвеса МодельИМаркаИспользуемогоОбвеса
        {
            get
            {
                return _модельИМаркаИспользуемогоОбвеса;
            }

            set
            {
                //if (ДополнительныйСвет == true && value == false)
                //{
                //    Цена -= 100;
                //}
                //else if (ДополнительныйСвет == false && value == true)
                //    Цена += 100;

                _модельИМаркаИспользуемогоОбвеса = value;
            }
        }

        public _Привод РеализуемыйПривод
        {
            get
            {
                return реализуемыйПривод;
            }

            set
            {
                //if (ДополнительныйСвет == true && value == false)
                //{
                //    Цена -= 100;
                //}
                //else if (ДополнительныйСвет == false && value == true)
                //    Цена += 100;

                реализуемыйПривод = value;
            }
        }

        public bool ЗаблокированныйДифференциал
        {
            get
            {
                return _ЗаблокированныйДифференциал;
            }

            set
            {
                if (ДополнительныйСвет == true && value == false)
                {
                    Цена -= 100;
                }
                else if (ДополнительныйСвет == false && value == true)
                    Цена += 100;
                _ЗаблокированныйДифференциал = value;
            }
        }

        public _СпортивнаяДисциплина СпортивнаяДисциплина
        {
            get
            {
                return _cпортивнаяДисциплина;
            }

            set
            {
                _cпортивнаяДисциплина = value;
            }
        }

        public DateTime ДатаПроизводстваИсходнойМашины
        {
            get
            {
                return датаПроизводстваИсходнойМашины;
            }

            set
            {
                датаПроизводстваИсходнойМашины = value;
            }
        }

        public DateTime ДатаПроизводстваЦелевойМашины
        {
            get
            {
                return датаПроизводстваЦелевойМашины;
            }

            set
            {
                датаПроизводстваЦелевойМашины = value;
            }
        }

        public int УникальныйФабричныйНомер
        {
            get
            {
                return uniqCarNumber;
            }

            set
            {
                uniqCarNumber = value;
            }
        }

        public float Цена
        {
            get
            {
                return _Цена;
            }

            set
            {
                _Цена = value;
            }
        }

        public string Примечания
        {
            get
            {
                return _Примечания;
            }

            set
            {
                _Примечания = value;
            }
        }

        private string _Примечания = "";

        // Название модели
        private string name = "Заводская";

        // Название фирмы производителя
        private _ЗаводСборщик manufacturer = _ЗаводСборщик.Тольятти;

        private _Ателье _Подрядчик = _Ателье.АвтоВАЗ;

        // Вес
        private float weight = 995;

        // Длина
        private float length = 4128;

        // Включен ли каркас безопасности
        private bool withSafetyCarcass = false;

        // Содержатся ли элементы из композитных материалов?
        private bool withCompositeMaterials = false;

        //========================= Подвеска
        private стабилизаторПоперечнойУчтойчивостиИМатериал используетсяЗаднийСтабилизатор = стабилизаторПоперечнойУчтойчивостиИМатериал.НЕИспользуется;

        /*string ТипАмортизаторов*/
        private _ТипАмортизаторов типАмортизаторов = _ТипАмортизаторов.Масло; // Масло, Газ-Масло, Газ

        private string маркаАмортизаторов = "ДААЗ";// На VFTS бильштейн используется

        // Содержится ли стабилизатор поперечной устойчивости и из какого материала он изготовлен
        private стабилизаторПоперечнойУчтойчивостиИМатериал _стабилизаторПоперечнойУчтойчивостиИМатериал = стабилизаторПоперечнойУчтойчивостиИМатериал.Заводской_Одинарный_ОбычнаяСталь;

        //============================

        //========================= Тормоза
        private bool наличиеГидроручника = false;

        private bool задниеДисковоыеТормоза = false;
        //============================

        //========================= Двигатель
        private _Двигатель _двигатель = _Двигатель.Заводской_1_2; //1.2 двигатель

        private _МодельИспользуемогоРаспредвала модельИспользуемогоРаспредвала = _МодельИспользуемогоРаспредвала.Стандарт;

        private string маркаКарбюраторов = "Дааз"; // Дааз(стандарт), Солекс(экспортный вариант), Weber 45 DCOE(боевой карбюратор), dellorto 40/45(боевой карбюратор), кастомные

        private bool используетсяСистемаВпрыска = false; // Только для MTX машин и последних поколений VFTS
        private string системаВпрыска = "Не Используется"; // Только для MTX машин и последних поколений VFTS
        private cистемаЗажигания _cистемаЗажигания = cистемаЗажигания.Контактная;

        // Мощность двигателя
        private float степеньСжатия = (float)8.5;

        private Tuple<float, _МатериалыМеталл> массаМаховикаИМатериал = new Tuple<float, _МатериалыМеталл>((float)7.4, _МатериалыМеталл.Заводская); // Заводской вес сильно больше
                                                                                                                                                    //=========================

        //========================= Коробка
        private bool прямозубаяКоробкаПередач = false;

        private int количествоСтупеней = 4;
        private _ИспользуемыйРяд используемыйРяд = _ИспользуемыйРяд.Стандарт;
        /*
        В стандартных переднеприводных ВАЗах применяются главные пары с передаточным отношением 3.7:1 или 3.9:1.
        Существуют варианты для тюнинга с соотношением 4.1:1, 4.3:1, 4.5:1, 4.7:1, 4.9:1, 5.1:1.
        */
        private Tuple<float, int> главнаяПара = new Tuple<float, int>((float)4.1, 1);
        //============================

        //========================= Свет
        private bool дополнительныйСвет;

        //============================

        //========================= Внешний вид
        private модельИМаркаИспользуемогоОбвеса _модельИМаркаИспользуемогоОбвеса = модельИМаркаИспользуемогоОбвеса.Заводской;

        //============================

        private _Привод реализуемыйПривод = _Привод.Задний;

        private DateTime датаПроизводстваИсходнойМашины = DateTime.Today;
        private DateTime датаПроизводстваЦелевойМашины = DateTime.Today;

        // Уникальный фабричный номер машины
        private int uniqCarNumber = -1;

        private float _Цена = (float)700.0;//$
        private bool _ЗаблокированныйДифференциал = false;
    }
}